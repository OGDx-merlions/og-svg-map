{"version":3,"sources":["og-svg-map.es6.js"],"names":["Polymer","is","behaviors","IronResizableBehavior","listeners","properties","width","type","String","value","height","contextPaneProportion","Number","isUpstreamVisible","Boolean","isMidstreamVisible","isDownstreamVisible","isPredictiveVisible","attached","contextPaneOpen","d3","Px","svg","select","zoomControl","zoom","scaleExtent","on","attr","event","transform","mapZoomArea","append","style","call","toggleContextPane","currHeightNum","replace","cpMinHeightPercentage","mapHeightPercentage","newMapHeight","Math","ceil","contextPaneMinHeight","defaultHeight","contextPaneMaxHeight","invalidateSize","$","map","_showAll","selector","querySelectorAll","forEach","elt","display","_hideAll","_toggleGroup","_stateName","_selector","_pressedCls","undefined","_toggleUpstream","_toggleMidstream","_toggleDownstream","_togglePredictive","_compute","_onIronResize","_zoomIn","scaleBy","transition","duration","_zoomOut"],"mappings":"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","file":"og-svg-map.js","sourcesContent":["(function() {\n  Polymer({\n\n    is: 'og-svg-map', \n\n    behaviors: [Polymer.IronResizableBehavior],\n\n    listeners: {'iron-resize': '_onIronResize'},\n\n    properties: {\n      /**\n       * Component width\n       */\n      width: {\n        type: String,\n        value: '75vw'\n      },\n      /**\n      * Component Height\n      */\n      height: {\n        type: String,\n        value: '500px'\n      },\n      contextPaneProportion: {\n        type: Number,\n        value: 0.35\n      },\n      isUpstreamVisible: {\n        type: Boolean,\n        value: true\n      },\n      isMidstreamVisible: {\n        type: Boolean,\n        value: true\n      },\n      isDownstreamVisible: {\n        type: Boolean,\n        value: true\n      },\n      isPredictiveVisible: {\n        type: Boolean,\n        value: true\n      }\n    },\n\n    attached() {\n      this.contextPaneOpen = false;\n      const d3 = Px.d3;\n      this.svg  = d3.select(\"#map svg\");\n      this.zoomControl = d3.zoom()\n        .scaleExtent([1, 5])\n        .on(\"zoom\", () => {\n          this.svg.attr(\"transform\", d3.event.transform);\n      });\n      this.mapZoomArea = this.svg.append(\"rect\")\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"all\")\n        .attr(\"width\", \"100%\")\n        .attr(\"height\", \"100%\")\n        .style(\"cursor\", \"grab\")\n        .call(this.zoomControl);\n    },\n\n    toggleContextPane() {\n      const currHeightNum = this.height.replace(/\\D/g, '');\n      const cpMinHeightPercentage = this.contextPaneProportion;\n      const mapHeightPercentage = (1 - cpMinHeightPercentage);\n      if(!this.contextPaneOpen) {\n        const newMapHeight = Math.ceil(currHeightNum * mapHeightPercentage);\n        this.height = this.height.replace(currHeightNum, newMapHeight);\n        this.contextPaneMinHeight = Math.ceil(currHeightNum * cpMinHeightPercentage);\n        this.contextPaneOpen = true;\n      } else {\n        this.height = this.defaultHeight;\n        this.contextPaneMinHeight = 0;\n        this.contextPaneMaxHeight = 0;\n        this.contextPaneOpen = false;\n      }\n    },\n\n    invalidateSize() {\n      this.$.map.invalidateSize();\n    },\n    _showAll(selector) {\n      this.querySelectorAll(selector).forEach((elt) => {\n        elt.style.display = 'block';\n      });\n    },\n    _hideAll(selector) {\n      this.querySelectorAll(selector).forEach((elt) => {\n        elt.style.display = 'none';\n      });\n    },\n    _toggleGroup(_stateName, _selector, _pressedCls) {\n      if(this[_stateName]) {\n        this._hideAll(_selector);\n        this[_pressedCls] = 'pressed';\n      } else {\n        this._showAll(_selector);\n        this[_pressedCls] = undefined;\n      }\n      this[_stateName] = !this[_stateName];\n    },\n    _toggleUpstream() {\n      this._toggleGroup('isUpstreamVisible', \n        '.upstream', 'upstreamPressedCls');\n    },\n    _toggleMidstream() {\n      this._toggleGroup('isMidstreamVisible', \n        '.midstream', 'midstreamPressedCls');\n    },\n    _toggleDownstream() {\n      this._toggleGroup('isDownstreamVisible', \n        '.downstream', 'downstreamPressedCls');\n    },\n    _togglePredictive() {\n      this._toggleGroup('isPredictiveVisible', \n        '.predictive', 'predictivePressedCls');\n    },\n    _compute(contextPaneOpen) {\n      return !contextPaneOpen;\n    },\n    _onIronResize() {},\n    _zoomIn() {\n      this.zoomControl.scaleBy(\n        this.mapZoomArea.transition().duration(750), 1.3);\n    },\n    _zoomOut() {\n      this.zoomControl.scaleBy(\n        this.mapZoomArea.transition().duration(750), 1 / 1.3);\n    },\n  });\n})();\n"]}